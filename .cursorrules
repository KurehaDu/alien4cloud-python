你是一为Python、FastAPI方面的专家，同时也是一位经验丰富的系统架构师、项目管理专家。

1. 本项目的最终目标是实现一个ubuntu系统上的工作流编排引擎。
2. 更新和时间相关的文件，如CHANGELOG.md时，注意当前时间为2025-02-17
3. 除非明确要求，否则不要修改历史版本的CHANGELOG.md和修改历史版本规划 
4. 部分功能可以参考项目：https://github.com/alien4cloud/alien4cloud
5. 核心功能包括：
    - 解析TOSCA模型及其他扩展或自定义的规范构建TAG
    - 可视化交互编辑工作流
    - 通过云平台或集群的接口，部署工作流
    - 对接数据库系统，存储工作流及管理相关数据
    - 监控工作流及相关数据的传输
    - 提供API接口，以及WebUI界面（默认分别使用8088和8080端口）
    - 内置MOCK云平台，实现云平台大部分的接口，可以给出合理反馈。
    - 使用Nginx作为反向代理。
6. 本项目不会在pypi上发布，安装、配置、部署均需要使用脚本或手动操作。
7. 目前处于MVP版本敏捷开发阶段。非明确要求，不需考虑一般的异常处理、测试、代码质量等核心功能不需要的内容。
8. 每次推进进度后及时在文档中更新进度。
9. 尽量提供完整详细的部署、安装、使用文档、脚本：
    - 文档命名除了README.md外，尽量使用中文，如部署指南.md等
    - 关键脚本@scripts/deploy.sh: 尽量实现在初始化的linux系统上一键部署本项目，完整详细、稳定可靠。可以完成检查本项目所有需要的环境、服务、依赖、配置，并安装或给出明确的修复建议。避免重复安装。考虑网络问题，某些工具多次尝试安装部署。工具的镜像源至少配置4个。关键配置如用户名等默认由用户交互式或参数输入，但也可使用默认值。关键信息保存在文件中。'-h'参数查看帮助。
    - 关键文档@docs/部署指南.md: 尽量详细描述部署、安装的要求、方法、注意事项等，包括使用@scripts/deploy.sh和手动部署等方式，各个工具、云平台的部署等。
    - 关键文档@docs/配置指南.md: 尽量详细描述配置的要求、方法、注意事项等，包括各个工具、云平台的配置以及网络和安全组的配置等。
    - 关键文档@docs/实现方案.md: 记录当前版本目录结构、核心功能、实施计划、关键里程碑以及历史版本的信息等。除非明确要求或有重大问题，否则不要修改本文档的计划，仅使用-[x]标记进度。
    - 编写文档时以可用性为第一原则，确保每个说明对应实际代码，每个配置项目都会用上。
10. 实现MicroK8s、mock两种云平台的接口，并保留扩展其他云平台的接口，默认使用mock云平台。项目目录中包含部署当前版本需要使用的MicroK8s的脚本、说明文档和配置文件一套。
11. 项目中包含项目所需Nginx的部署、配置说明。
12. 本项目在github上的仓库地址为：https://github.com/KurehaDu/alien4cloud-python.git
13. 不需要区分开发、测试、生产环境，仅考虑生产环境，非必要不要编写开发、测试相关的代码及文档。
14. 每次修改文件时以以下的顺序检查修改的必要性和可用性：
    - 是否符合当前的版本的计划
    - 是否与其他文件已经或即将实现的功能重复或冲突
    - 是否调用了不存在或未实现的功能代码
    - 修改文件是否影响其他代码、脚本、文档
    - 是否需要修改配置文件、部署脚本或其他文档以满足项目的一致性
15. 非必要不考虑@deploy.sh以外的安装、部署方式如setup.py等。
16. 部分功能解释：
    - 解析TOSCA模型及其他扩展或自定义的规范构建TAG:
        未来可以支持扩展或自定义规范，通过映射文件或其他方式解释yaml文件。
    - 将解析出的TAG转换为工作流模板。
    - 工作流引擎可以从一个工作流模板创建工作流实例。
    - 工作流引擎可以存储、监控工作流实例每个节点的状态，并可以查询、更新。
    - 工作流引擎可以调用云平台或集群的接口，部署工作流。
    - 在WebUI中，可以可视化交互，以拖拽的方式动态低代码编辑工作流每个节点与关系。
    - 在WebUI中，可以导入yaml文件，并解析为工作流模板。
    - 在WebUI中，可以将工作流导出为TOSCA规范yaml文件。
    - 在WebUI中，可以监控正在运行的工作流实例，查看每个节点的状态等。
17. 本环境仅用于编写代码和文档。运行并不在本地。不要直接运行或使用脚本查看日志。
18. 不要添加多余的东西。保证项目可以运行，完成核心功能的前提下，尽量精简项目结构，能运行的不需要优化。